=== Swap ===

Standard 2D language. Each instruction gets changed to its opposite after the IP hits it. IP loops around the edges. 2 stacks for memory. Each stack is padded with infinite zeroes.

== Inctructions ==

= Movement =

>  Turn right
<  Turn left
v  Turn down
^  Turn up
/  Mirror
\  Mirror
|  Mirror
_  Mirror

[  If moving right, reflect to the left
]  If moving left, reflect to the right

?  Skip the next instruction if the stack.pop is not 0
!  Skip the next instruction if the stack.pop is 0

s  IP starts at the top-left most s if there is one, otherwise in the very top left
x  End execution

= Literals =

"    Enter/exit string mode
'    Push the literal next character (as codepoint)
0-9  Number literals: multiply top of stack by 10, then add the number to it

= I/O =

i  Read a character from input and push its codepoint
o  Pop a number and print as character
m  Read a number from input and push its codepoint
n  Pop and print as number

= Arithmetic =

+  Add top stack elements
-  Subtract top from second from top
*  Multiply top stack elements
:  Divide top stack elements
(  Less than
)  Greater then
=  Equals
~  Not equals

= Stack =

,  Duplicate
.  Discard
%  Swap top two stack elements
$  Swap to the other stack
@  Rotate stack upward
#  Rotate stack downward


== Opposite Instructions ==

Here are the pairs of opposite instructions that get switched:

< >
v ^
[ ]
/ \
_ |
s x
? !
" '
i o
m n
+ -
* :
( )
= ~
, .
% $
@ #